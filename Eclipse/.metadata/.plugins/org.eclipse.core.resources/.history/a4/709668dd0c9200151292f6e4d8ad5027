/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        printf       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "alt_types.h"
#include <stdio.h>

#define sram_base  0x00100000 //(volatile alt_u16*)
#define dram_base  0x01000000 	// (volatile alt_u16*)
#define flash_base 0x01800000 	// (alt_u8*)
#define sw_base 0x00009100 		// (volatile alt_u8*)
#define leds_base 0x000090F0 	// (volatile alt_u8*)
#define img1_base 0x000090E0 	// (volatile alt_u8*)
#define img2_base  0x000090D0 	//(volatile alt_u8*)
#define reset_base 0x000090C0 	//(volatile alt_u8*)
#define clk_f_nios_base 0x000090B0 // (volatile alt_u8*)
#define clk2nios_base 0x000090A0 	//(volatile alt_u8*)
#define data2nios_base 0x00009090 	//(volatile alt_u16*)

alt_u16* sram = (alt_u16 *) sram_base;
alt_u16* dram = (alt_u16 *) dram_base;
alt_u8* flash = (alt_u8 *) flash_base;

//alt_u8* leds = (alt_u8*) leds_base;
//alt_u8* img1 = (alt_u8*) img1_base;
//alt_u8* img2 = (alt_u8*) img2_base;
//alt_u8* reset = (alt_u8*) reset_base;
//alt_u8* clk_f_nios = (alt_u8*) clk_f_nios_base;

//volatile alt_u8* clk2nios = (volatile alt_u8*) clk2nios_base;
//volatile alt_u16* data2nios = (volatile alt_u16*) data2nios_base;
//volatile alt_u8* sw = (volatile alt_u8*) sw_base;

char i;
alt_u8 flag = 0;
void nop() {
	for (i = 0; i < 10; i++) {
		flag = i;
	}
}
/*
 * Display memory(mem) from base to screen
 */
void display(const int base) {
	alt_u16 temp8_l;
	alt_u16 temp8_h;
	alt_u16 temp16;
	int j = 0;
	for (j = 0; j < 153600; j++) {
		temp8_l = dram[2 * j + base];
		temp8_h = dram[2 * j + base + 1];
		temp16 = (temp8_h << 8) + temp8_l;
		sram[j] = temp16;
	}
}
/*
 * Display image stored in FLASH from base
 */
void dispImage(const int base) {
	alt_u16 temp8_l;
	alt_u16 temp8_h;
	alt_u16 temp16;
	alt_u8* sram_tmp;
	int j = 0;
	for (j = 0; j < 153600; j++) {
		sram_tmp = flash + 2 * j + base;
		temp8_l = sram_tmp[0];
		temp8_h = sram_tmp[1];
		temp16 = (temp8_h << 8) + temp8_l;

		sram[j] = temp16;
	}
}
void makeOutput(int index) {

	IOWR(clk_f_nios_base,0, 0);
	IOWR(img1_base,0,dram[index]);
	IOWR(clk_f_nios_base,0, 1);
	nop();
	//*img2 = *(dram + index); // NOP to hold clk_f_nios = 1
}
/***************************************************************************************************************
 * 0, SW[2:0] = 000 => do nothing					LEDR = FF to candidate
 * 1, SW[2:0] = 001 => display Image background 	LEDR = 01 when complete
 * 2, SW[2:0] = 011 => display Image Object			LEDR = 03 when complete
 * 3, SW[2:0] = 010 => display Image delta frame	LEDR = 02 when complete
 * 4, SW[2:0] = 110 => display Image Threshold		LEDR = 06 when complete
 * 5, SW[2:0] = 111 => display Image Median Filter	LEDR = 07 when complete		1 pixel (8 bit ) out through img1
 * 6, SW[2:0] = 101 => display Image Edge Detector	LEDR = 05 when complete		1 pixel (8 bit ) out through img1
 ***************************************************************************************************************
 * 1. DRAM[0:307200]			store Image Delta Frame
 * 2. DRAM[307200:614400] 		store Image Threshold
 * 3. DRAM[614400:921600]		store Image Median Filter
 * 4. DRAM[921600:1228800]		store Image Edge Detector
 *******************************************************************************
 */
int main() {

	alt_u32 j;

	IOWR(reset_base, 0,1);
	clk_f_nios[0] = 0;
	printf("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
		switch (IORD(sw_base,0)) {
		case 0x01: {
			dispImage(0);
			IOWR(leds_base,0, 0x01);
			break;
		}
		case 0x03: {
			dispImage(307200);
			IOWR(leds_base,0,0x03);
			flag = 0;
			break;
		}
		case 0x02: {
			if (flag == 0) {
				IOWR(reset_base, 0,1);
				printf("\n Started Delta Frame...\n");
				IOWR(reset_base, 0, 0);
				for (j = 0; j < 307200; j = j + 1) {
					clk_f_nios[0] = 0;
					IOWR(img1_base,0,flash[j]);
					IOWR(img2_base,0,flash [j + 307200]);
					clk_f_nios[0] = 1;

					*(dram + j) = IORD(data2nios_base,0);
				}
				/* Display Image delta frame */
				display(0);
				IOWR(leds_base,0, 0x02); /* Indicate complete transfer */
			}
			flag = 1;
			break;
		}
		case 0x06: {
			if (flag == 1) {
				IOWR(reset_base,0, 1);
				printf("\n Started Threshold...\n");
				IOWR(reset_base,0, 0);
				for (j = 0; j < 307200; j = j + 1) {
					clk_f_nios[0] = 0;
					for (i = 0; i < 10; i++)
						;
					IOWR(img1_base,0,dram [j]);
					for (i = 0; i < 10; i++)
						;
					clk_f_nios[0] = 1;
					for (i = 0; i < 10; i++)
						;
					*(dram + j + 307200) = IORD(data2nios_base,0);
					for (i = 0; i < 10; i++)
						;
				}
				display(307200);
				IOWR(leds_base,0, 0x06);
			}
			flag = 0;
			break;
		}
		case 0x07: {
			// 614400 - 640*2 - 2 = 613118

			if (flag == 0) {
				IOWR(reset_base,0,1);
				printf("\n Started Median Filter...\n");
				IOWR(reset_base,0, 0);
				for (j = 307200; j < 613118; j++) {

					makeOutput(j);
					makeOutput(j + 1);
					makeOutput(j + 2);
					makeOutput(j + 640);
					makeOutput(j + 641);
					makeOutput(j + 642);
					makeOutput(j + 12800);
					makeOutput(j + 12801);
					makeOutput(j + 12802);

					//Wait state

					clk_f_nios[0] = 0;
					nop();
					clk_f_nios[0] = 1;

					while (IORD(clk2nios_base,0) == 0)
						;
					nop();
					*(dram + j + 307841) = IORD(data2nios_base,0);
					nop();
				}

				// Copy 640 pixel in first line

				for (j = 307200; j < 307840; j++) {
					nop();
					*(dram + 307200 + j) = *(dram + j);
					nop();
					*(dram + 613760 + j) = *(dram + j + 306560);
					nop();
				}

				display(614400);
				IOWR(leds_base,0,0x07);
				flag = 1;
			}

			break;
		}

		case 0x05: {
			// (614400 + 307200) - 640*2 - 1 = 920319
			if (flag == 1) {
				IOWR(reset_base,0,1);
				nop();
				printf("\n Started Edge detector...\n");
				nop();
				IORW(reset_base, 0, 0);
				for (j = 614401; j < 920319; j++) {
					makeOutput(j);
					makeOutput(j + 639);
					makeOutput(j + 640);
					makeOutput(j + 641);
					makeOutput(j + 1280);

					// Wait state

					clk_f_nios[0] = 0;
					nop();
					clk_f_nios[0] = 1;

					while (IORD(clk2nios_base,0) == 0)
						;
					// 307200 + 640 = 307840
					nop();
					dram [j + 307840] = IORD(data2nios_base,0);
					nop();
				}

				// Copy 640 pixel in first line

				for (j = 614400; j < 615040; j++) {
					nop();
					dram [307200 + j] = dram [j];
					nop();
					dram [613760 + j] = dram [j + 306560];
					nop();
				}
				display(921600);
				flag = 0;
				IOWR(leds_base, 0,0x05);
			}
			break;
		}

		default: {
			dispImage(614400);
			IOWR(leds_base,0,0xFF);
			break;
		}
		}
	};
	return 0;
}
