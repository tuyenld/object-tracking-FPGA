/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_alt_putstr       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "alt_types.h"
#define sram (volatile alt_u16*) 0x00100000
#define dram (volatile alt_u16*) 0x01000000
#define flash (alt_u8*) 0x01800000
#define sw (volatile alt_u8*) 0x00002100
#define leds (volatile alt_u8*) 0x000020F0
#define img1 (volatile alt_u8*) 0x000020E0
#define img2 (volatile alt_u8*) 0x000020D0
#define reset (volatile alt_u8*) 0x000020C0
#define clk_f_nios (volatile alt_u8*) 0x000020B0
#define clk2nios (volatile alt_u8*) 0x000020A0
#define data2nios (volatile alt_u16*) 0x00002090
char i_pulse = 0;
int j = 0;
volatile alt_u16 temp8_l;
volatile alt_u16 temp8_h;
volatile alt_u16 temp16;
volatile alt_u8* sram_tmp;

/*
 * Input is sampled to DRAM from base
 */
void sample(int base) {
	if ((*(clk2nios) == 1) && (i_pulse == 0)) {
		*(dram + base) = *data2nios;
		i_pulse = 1;
	}
	if (*clk2nios == 0)
		i_pulse = 0;
}
/*
 * Display memory(mem) from base to screen
 */
void display(const int base) {
	for (j = 0; j < 153600; j++) {
		temp8_l = *(dram + 2 * j + base);
		temp8_h = *(dram + 2 * j + base + 1);
		temp16 = (temp8_h << 8) + temp8_l;
		*(sram + j) = temp16;
	}
}
/*
 * Display image stored in FLASH from base
 */
void dispImage(const int base) {
	for (j = 0; j < 153600; j++) {
		sram_tmp = flash + 2 * j + base;
		temp8_l = *(sram_tmp);
		temp8_h = *(sram_tmp + 1);
		temp16 = (temp8_h << 8) + temp8_l;

		*(sram + j) = temp16;
	}
}
void makeOutput(int index) {
	*clk_f_nios = 0;
	*img1 = *(dram + index);
	*clk_f_nios = 1;
}
/***************************************************************************************************************
 * 0, SW[2:0] = 000 => do nothing
 * 1, SW[2:0] = 001 => display Image background 	LEDR = 01 when complete
 * 2, SW[2:0] = 011 => display Image Object			LEDR = 02 when complete
 * 3, SW[2:0] = 010 => display Image delta frame	LEDR = 03 when complete
 * 4, SW[2:0] = 110 => display Image Threshold		LEDR = 04 when complete
 * 5, SW[2:0] = 111 => display Image Median Filter	LEDR = 04 when complete		1 pixel (8 bit ) out through img1
 ***************************************************************************************************************
 * 1. DRAM[0:307200]		store Image Delta Frame
 * 2. DRAM[307200:614400] 	store Image Threshold
 * 3. DRAM[0:153599]		store Image Median Filter
 * 4. DRAM[153600:307200]	store Image Edge Detector
 *
 *******************************************************************************
 */
int main() {
	//volatile alt_u16 temp_ram;
	*reset = 1;
	*clk_f_nios = 0;
	alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
		switch (*(sw)) {
		case 0x01:
			dispImage(0);
			*leds = 0x01;
			break;

		case 0x03:
			dispImage(307200);
			*leds = 0x03;
			break;
		case 0x02:
			alt_putstr("\n Started Delta Frame...\n");
			*reset = 0;
			for (j = 0; j < 307200; j++) {
				*clk_f_nios = 0;
				*img1 = *(flash + j);
				*img2 = *(flash + j + 307200);
				*clk_f_nios = 1;
				/*
				 * prevent sw change when work isn't complete
				 */
				if (*(sw) == 0x02)
					*(dram + j) = *data2nios;
			}
			// Display Image delta frame
			display(0);
			*leds = 0x02; //Indicate complete transfer
			break;
		case 0x06:
			*reset = 1;
			alt_putstr("\n Started Threshold...\n");
			*reset = 0;
			for (j = 0; j < 307200; j++) {
				*clk_f_nios = 0;
				*img1 = *(dram + j);
				//*img1 = *(dram + j + 1);

				*clk_f_nios = 1;
				/*
				 * prevent sw change when work isn't complete
				 */
				if (*(sw) == 0x06)
					*(dram + j + 307200) = *data2nios;
			}
			display(307200);
			*leds = 0x06;
			break;
		case 0x07:
			*reset = 1;
			alt_putstr("\n Started Median Filter...\n");
			*reset = 0;
			// 614400 - 480*2 - 2 = 613118
			for (j = 307200; j < 613118; j++) {
				makeOutput(j);
				makeOutput(j + 1);
				makeOutput(j + 2);
				temp16 = j + 640;
				makeOutput(temp16);
				makeOutput(temp16 + 1);
				makeOutput(temp16 + 2);
				temp16 = temp16 + 640;
				makeOutput(temp16);
				makeOutput(temp16 + 1);
				makeOutput(temp16 + 2);
				/*
				 * Sample input as 8 bit
				 * j + 307200 + 641 = j + 307841
				 */
				//if ((*(clk2nios) == 1) && (i_pulse == 0)) {
				//	*(dram + j + 307841) = *data2nios;
				//	i_pulse = 1;
				//}
//				if (*clk2nios == 0)
//					i_pulse = 0;
				//alt_putstr("\n ...Wait while...\n");
				if (*(sw) == 0x07) {
					while (*(clk2nios) == 0)
						;
					*(dram + j + 307841) = *data2nios;
				}

			}

			display(614400);
			*leds = 0x07;
			break;
		default:
			*leds = 0x0F;
			break;
		}
	};

	return 0;
}
